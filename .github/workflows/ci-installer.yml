# This is a basic workflow to help you get started with Actions

name: "CI-Installer"

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the upcoming branch
  push:
    branches: [ upcoming-installer-gui ]
  pull_request:
    branches: [ upcoming-installer-gui ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build_win:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.301' # SDK Version to use; x will use the latest version of the 3.1 channel

      - name: Build and publish windows
        run: |
            cd OTAPI.Client.Installer
            dotnet publish -r win-x64 -c Release --framework net5.0 -p:PublishProfile=FolderProfile --self-contained true
            Compress-Archive bin/Release/net5.0/win-x64/publish ../published.zip

      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "installer-windows"
          prerelease: true
          title: "Windows Installer"
          files: published.zip

  build_osx:
    # The type of runner that the job will run on
    runs-on: macos-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.301' # SDK Version to use; x will use the latest version of the 3.1 channel

      - name: Build and publish macos
        run: |
            cd OTAPI.Client.Installer
            dotnet publish -r osx.10.11-x64 -c Release --framework net5.0 -p:PublishProfile=FolderProfile --self-contained true
            zip -r ../published.zip bin/Release/net5.0/osx.10.11-x64/publish

      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "installer-macos"
          prerelease: true
          title: "MacOS Installer"
          files: published.zip

  # This workflow contains a single job called "build"
  build_lin:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.301' # SDK Version to use; x will use the latest version of the 3.1 channel

      - name: Build and publish linux
        run: |
            cd OTAPI.Client.Installer
            dotnet publish -r ubuntu.16.04-x64 -c Release --framework net5.0 -p:PublishProfile=FolderProfile --self-contained true
            zip -r ../published.zip bin/Release/net5.0/ubuntu.16.04-x64/publish

      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "installer-linux"
          prerelease: true
          title: "Linux Installer"
          files: published.zip
